import asyncio
from datetime import datetime
import time
from aiogram import F
from aiogram.types import Message, ContentType
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from models import *
from utils import SheetsAPI
from config import *


dp = Dispatcher()
sheets = SheetsAPI(CRED)

open('logging.log', 'wb')
def log(*args):
    out = ' '.join([str(x) for x in [time.strftime("%d-%H:%M:%S"), f'[I]:', *args]])
    print(out)
    open('logging.log', 'a', -1, 'utf8').write(out + '\n')


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    chat_id = message.chat.id
    log(chat_id, '-> /start')
    defaults={
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name,
        'language_code': message.from_user.language_code,
        'last_activity': datetime.now()
    }
    user, created = User.get_or_create(user_id=message.from_user.id, defaults=defaults)
    if not created:
        for key, value in defaults.items():
            setattr(user, key, value)
        user.save()

    if chat_id in ADMIN_IDS:
        main_menu = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", callback_data="add_portfolio")],
                [InlineKeyboardButton(text="–õ–æ–≥–∏", callback_data="logs")],
                [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫", callback_data="stats")]
            ]
        )
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=main_menu)
    else:
        main_menu = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="about")],
                [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞", callback_data="order")],
                [InlineKeyboardButton(text="–°–æ—Ü-—Å–µ—Ç–∏", callback_data="socials")],
                [InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="examples")]
            ]
        )
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AdFMBot. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu)


@dp.message(F.content_type.in_([ContentType.PHOTO]))
async def handle_albums(message: Message):
    chat_id = message.chat.id
    log(chat_id, '-> [PHOTO]:', message.photo[-1].file_id)
    if chat_id in ADMIN_IDS:
        file_id = message.photo[-1].file_id
        Example.create(description=message.caption, photo=file_id)
        await bot.send_message(chat_id, '–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω')


@dp.message()
async def message_handler(message: Message):
    chat_id = message.chat.id
    log(chat_id, '-> [TEXT]:', message.text[:100])
    if chat_id in ADMIN_IDS:
        Example.create(description=message.text)
        await bot.send_message(chat_id, '–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω')
    
    elif len(message.text) > 10:
        sheets.update_data(chat_id, message.text)
        await bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è.')
        for admin in ADMIN_IDS:
            await bot.send_message(admin, (
                '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ '+
                f'{message.from_user.first_name} [{message.from_user.username if message.from_user.username else message.from_user.id}]:\n'+
                '----------------' +
                message.text +
                '----------------'
            ))
            

@dp.callback_query()
async def about_company(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    log(chat_id, '-> [BUTTON]:', callback_query.data)
    if callback_query.data == 'about':
        btn, created = ButtonStat.get_or_create(button_text='–û –∫–æ–º–ø–∞–Ω–∏–∏')
        btn.click_count += 1
        btn.save()
        
        text = (
            'AdFMBot ‚Äî –°–æ–∑–¥–∞–µ–º Telegram-–±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤–∞—à –±–∏–∑–Ω–µ—Å!\n'
            'üë• –ö—Ç–æ –º—ã?\n'
            '–ö–æ–º–∞–Ω–¥–∞ –∏–∑ 5 –º–æ–ª–æ–¥—ã—Ö –∏ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –≤–∫–ª—é—á–∞—è –ò–ò, —á—Ç–æ–±—ã —Ä–µ—à–∞—Ç—å –≤–∞—à–∏ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞ Python üì± (—Ñ—Ä–µ–º–π–≤–æ—Ä–∫ Aiogram)\n\n'
            '‚ùì–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å‚ùì\n'
            '‚úîÔ∏è–ü–æ–¥—Ö–æ–¥ Z-–æ–≤ ‚Äî —Å–≤–µ–∂–∏–µ –∏–¥–µ–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è Z.\n'
            '‚úîÔ∏è –ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã ‚Äî –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –∑–∞ —Ä–∞–∑—É–º–Ω—ã–π –±—é–¥–∂–µ—Ç.\n'
            '‚úîÔ∏è –û–ø—ã—Ç ‚Äî –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏–º–µ–µ—Ç –æ–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–≤ —Å–≤—ã—à–µ 3 –ª–µ—Ç\n'
            '‚úîÔ∏è –õ–∏—á–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –∫–∞–∫ —Å –Ω–∞—à–∏–º–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.\n'
            '‚úîÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫.\n'
            '‚úîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –≤–∞—à –±–æ—Ç –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.'
        )
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, text)


    elif callback_query.data == 'order':
        btn, created = ButtonStat.get_or_create(button_text='–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞')
        btn.click_count += 1
        btn.save()

        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –±–æ—Ç–∞:")


    elif callback_query.data == 'socials':
        btn, created = ButtonStat.get_or_create(button_text='–°–æ—Ü-—Å–µ—Ç–∏')
        btn.click_count += 1
        btn.save()

        text = (
            "–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:\n"
            "üîπ Telegram-–∫–∞–Ω–∞–ª: https://t.me/AdFMBot_chanel\n"
            "üîπ Kwork: https://kwork.ru/user/alexei_adfmbot\n"
            "üîπ –ê–≤–∏—Ç–æ: https://www.avito.ru/novosibirsk/predlozheniya_uslug/sotrudnik_s_iskusstvennym_intellektom_na_avitotg_4881725943"
        )
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, text)


    elif callback_query.data == 'examples':
        btn, created = ButtonStat.get_or_create(button_text='–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç')
        btn.click_count += 1
        btn.save()
        
        await bot.answer_callback_query(callback_query.id)
        examples = Example.select()
        if examples.count() == 0:
            await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

        for example in Example.select():
            if example.photo:
                await bot.send_photo(chat_id, example.photo, caption=example.description)
            else:
                await bot.send_message(callback_query.from_user.id, example.description)


    elif callback_query.data == 'add_portfolio':
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ —Ñ–æ—Ç–æ –æ–±–ª–æ–∂–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")


    elif callback_query.data == 'logs':
        logs = open('logging.log', 'r', -1, encoding='utf8').readlines()
        await bot.send_message(chat_id, ''.join(logs[-50:]))


    elif callback_query.data == 'stats':
        text = ''
        for button in ButtonStat.select():
            text += f'[{button.button_text}] - {button.click_count}\n'

        await bot.send_message(callback_query.from_user.id, text if text else '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â—ë –ø—É—Å—Ç!')


if __name__ == "__main__":
    bot = Bot(token=TOKEN)
    asyncio.run(dp.start_polling(bot))
